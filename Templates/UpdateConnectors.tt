<#@ template debug="true" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="NetStandard" #>
<#@ import namespace="System.Threading.Tasks" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#@ assembly name="$(TargetDir)DutchGrit.AfasClient.dll" #>
<#@ assembly name="Newtonsoft.Json.dll" #>
<#@ import namespace="Newtonsoft.Json" #>
<#@ import namespace="DutchGrit.Afas" #>
<#@ import namespace="DutchGrit.Afas.CodeGen" #>
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Text;

<#@ include file="config.ttinclude" #> 

<#

            try
            {
                
                var conn = new AfasClient(memberid, token);
                var version = conn.GetVersion();
                var generator = new UpdateGenerator(conn);
                var items = generator.GenerateList();
           
#>
// Autogenerated on : <#= DateTime.Now #> using Afas version <#= version #>

namespace DutchGrit.Afas.Entities
{

<#
            foreach (var meta in items)
                {
               
                    if (!string.IsNullOrEmpty(meta.Description))
                    {
                        WriteLine($"    /// <summary>");
                        WriteLine($"    /// {meta.Description}");
                        WriteLine($"    /// </summary>");
                    }

                    //Make sure to record the ConnectorName 
                    if (meta.IsConnected)
                    {
                        WriteLine($"    [ConnectorName(\"{meta.Id}\")] ");
                    }

                    //Check if there are PrimaryKey fields
                    foreach (var primField in meta.Fields.Where(x => x.PrimaryKey.ToLower() == "true"))
                    {
                        WriteLine($"    [KeyField(\"{primField.FieldId}\")] ");
                    }

                      

                    WriteLine($"    public class {meta.Name} : {Helpers.GetInterfaceString(meta.IsConnected)}");
                    WriteLine("    {");

                    //loop throught fields
                    foreach (var item in meta.Fields)
                    {
                        WriteLine($"        /// <summary>"); 
                        WriteLine($"        /// {item.Label}");
                        WriteLine($"        /// </summary>");
                        //if (item.Mandatory)
                        //{
                        //    sb.WriteLine($"        [JsonRequired()]");
                        //}
                        WriteLine($"        [JsonProperty(\"{item.FieldId}\")]");

                        if (item.DataType == "string")
                        {
                            WriteLine($"        [MaxLength({item.Length}, ErrorMessage = \"{{0}} has a max of {{1}} characters\")]");
                        }

                        WriteLine($"        public virtual {Helpers.DataTypeToType(item.DataType, item.ControlType)} {item.FieldId} {{ get; set; }}");
                        WriteLine("");

                        if (item.Values != null)
                        {
                            WriteLine($"        public static Dictionary<string, string> {item.FieldId}Values = new Dictionary<string, string>()");
                            WriteLine($"        {{");
                            foreach (var valueItem in item.Values)
                            {
                                WriteLine($"            {{\"{valueItem.Id}\",\"{valueItem.Description}\" }},");
                            }
                            WriteLine($"        }};");
                            WriteLine("");
                        }
                    };


                    if (meta.Objects != null)
                    {
                        WriteLine($"        [JsonIgnore()]");
                        WriteLine($"        public {nameof(IUpdateEntity)}[] Objects");
                        WriteLine($"        {{");
                        WriteLine($"            get");
                        WriteLine($"            {{");
                        WriteLine($"                return _Objects.Count == 0 ? null : _Objects.ToArray();");
                        WriteLine($"            }}");
                        WriteLine($"        }}");
                        WriteLine("");
                        WriteLine($"        [JsonIgnore()]");
                        WriteLine($"        private List<{nameof(IUpdateEntity)}> _Objects = new List<{nameof(IUpdateEntity)}>();");
                        WriteLine("");

                        //Add helper methods to easily add new IEntity objects to the Objects array          
                        foreach (var nextObj in meta.Objects)
                        {
                            WriteLine($"        public void Add{nextObj.Name}({nextObj.Name} {nextObj.Name.ToLower()})");
                            WriteLine($"        {{");
                            WriteLine($"            this._Objects.Add({nextObj.Name.ToLower()});");
                            WriteLine($"        }}");
                            WriteLine("");
                        }
                    }
                    else
                    {
                        WriteLine($"        [JsonIgnore()]");
                        WriteLine($"        public {nameof(IUpdateEntity)}[] Objects => null;");
                    }

                    WriteLine("    }");

                    //Enums of integer based 
                    foreach (var fieldinfo in meta.Fields.Where(f => f.Values != null))
                    {
                        //Determine if values are all integer based.
                        var isInteger = true;
                        foreach (var valueinfo in fieldinfo.Values)
                        {
                            isInteger &= int.TryParse(valueinfo.Id, out _);
                        }

                        if (isInteger)
                        {
                            WriteLine($"    public enum {meta.Name}{fieldinfo.FieldId}Values");
                            WriteLine($"    {{");
                            var usedNames = new List<string>();
                            foreach (var valueinfo in fieldinfo.Values)
                            {
                                var valueName = valueinfo.Description.RemoveDiacritics().AsCodeName();

                                //valueName mag niet al een keer gebruikt zijn, zowel, aanvullen met een underscore.

                                while (usedNames.Contains(valueName)) { valueName += "_"; }
                                usedNames.Add(valueName);
                                WriteLine($"        {valueName} = {valueinfo.Id},");
                            }
                            WriteLine($"    }}");
                            WriteLine("");
                        }
                    }
                }


#>

}

<#
            }
            catch (Exception ex)
            {
                WriteLine($"//{ex.ToString()}");
                return "";
            }
#>