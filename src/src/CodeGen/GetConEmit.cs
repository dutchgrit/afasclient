using System;
using System.Collections.Generic;
using System.Text;

namespace DutchGrit.Afas.CodeGen
{
    public class GetConEmit
    {
        public static string EmitGetConnector(GetConMetaInfo meta, EmitOptions options = null)
        {
            if (options == null) { options = new EmitOptions(); }   

            var sb = new StringBuilder();
            sb.AppendLine($"using Newtonsoft.Json; ");
            sb.AppendLine($"using System;");
            sb.AppendLine($"using System.Collections.Generic;");
            sb.AppendLine($"using System.ComponentModel;");
            sb.AppendLine($"using System.ComponentModel.DataAnnotations;");
            sb.AppendLine($"using System.Text;");
            sb.AppendLine($"using DutchGrit.Afas;");
            sb.AppendLine($"");
            sb.AppendLine($"// Autogenerated by afas-cli");
            sb.AppendLine($"");
            sb.AppendLine($"namespace {options.NameSpace}");
            sb.AppendLine($"{{");
            sb.AppendLine($"    [ConnectorName(\"{meta.Name}\")] ");
            sb.AppendLine($"    {options.GetClassAccessModifier} class {Utils.StripUnderscore(meta.Name)} : IGetEntity ");
            sb.AppendLine($"    {{ ");
            foreach (var item in meta.Fields)
            {
                sb.AppendLine($"");
                sb.AppendLine($"        /// <summary>");
                sb.AppendLine($"        /// {item.Label}");
                sb.AppendLine($"        /// </summary>");
                sb.AppendLine($"        [Description(\"{item.Label}\")]");
                sb.AppendLine($"        [JsonProperty(\"{item.Id}\")]");
                sb.AppendLine($"        public virtual {Helpers.DataTypeToType(item.DataType, item.ControlType)} {Utils.FixFields(item.Id)} {{ get; set; }}");
                sb.AppendLine($"");
            }
            sb.AppendLine($"    }}");
            sb.AppendLine($"}}");
            return sb.ToString();
        }
    }
}
